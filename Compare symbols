Given a string S(input consisting) of ‘’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘’ and ‘#’ are equal. The ‘’ and ‘#’ can be at any position in the string.

Input Format

Read a string

Constraints

string

Output Format

(>#): positive integer (#>): negative integer (#=*): 0

Sample Input 0

###***
Sample Output 0

0
Sample Input 1

**###*##*###
Sample Output 1

-4





#include <stdio.h>
#include <stdlib.h>

int main() {
    char str[201]; // Assuming the maximum length of the string is 200
    int hashCount = 0, starCount = 0;

    // Input the string
    
    scanf("%s", str);

    // Count the number of '*' and '#' characters
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '*') {
            starCount++;
        } else if (str[i] == '#') {
            hashCount++;
        }
    }

    // Calculate the absolute difference between counts
    int diff = abs(hashCount - starCount);

    // Print the result
    printf("%d\n", diff);

    return 0;
}
